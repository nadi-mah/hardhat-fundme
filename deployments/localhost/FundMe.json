{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAdrressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c9f63ac1e2aaf362dc69fca64a352fdfb107f41e2980f46b877f7210fa51d1c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1084579",
    "logsBloom": "0x
    "blockHash": "0x9b3880a4fa0879a9f9c6fa75474806b90bed314ed2c16f9759a12439a55d26df",
    "transactionHash": "0x3c9f63ac1e2aaf362dc69fca64a352fdfb107f41e2980f46b877f7210fa51d1c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1084579",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "fae419208805fe0e421af398663ed5d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAdrressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Nadia Mahyaee\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.7;\\n//imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n//error codes\\nerror FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Nadia Mahyaee\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\n\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n    // State variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    address private /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //modifier\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n\\n\\n    constructor(address priceFeedAddress) {\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        i_owner = msg.sender;\\n    }\\n    \\n    \\n\\n    //functions\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n       \\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner{\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for(uint256 funderIndex=0; funderIndex<funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder]=0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, )= i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n\\n\\n    //we change public state variables to private and then return them here as a function\\n    }\\n    function getOwner() public view returns(address){\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address){\\n        return s_funders[index];\\n    }\\n    function getAdrressToAmountFunded(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    } \\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n\\n\\n}\\n\",\"keccak256\":\"0xfe15813c767b014a642b48cd8e0ae701916dd73674b7a1fbce35a7189d98c483\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        \\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x5b20d4c39f5d976bd7565404c57519af3ff4f954e0deb36bbcc830b54425ce95\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001340380380620013408339818101604052810190620000379190620000d7565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600081519050620000d18162000142565b92915050565b600060208284031215620000f057620000ef6200013d565b5b60006200010084828501620000c0565b91505092915050565b600062000116826200011d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200014d8162000109565b81146200015957600080fd5b50565b6111d4806200016c6000396000f3fe60806040526004361061008a5760003560e01c80639214864e116100595780639214864e146101405780639e87a5cd1461017d578063b60d4288146101a8578063be2693f0146101b2578063d7b4750c146101bc57610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100ea578063893d20e81461011557610099565b36610099576100976101f9565b005b6100a16101f9565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b2c565b610333565b6040516100d79190610d22565b60405180910390f35b6100e861037b565b005b3480156100f657600080fd5b506100ff6105bd565b60405161010c9190610d22565b60405180910390f35b34801561012157600080fd5b5061012a6105ca565b6040516101379190610cac565b60405180910390f35b34801561014c57600080fd5b5061016760048036038101906101629190610b2c565b6105f4565b6040516101749190610d22565b60405180910390f35b34801561018957600080fd5b5061019261063c565b60405161019f9190610cc7565b60405180910390f35b6101b06101f9565b005b6101ba610666565b005b3480156101c857600080fd5b506101e360048036038101906101de9190610b59565b6108f8565b6040516101f09190610cac565b60405180910390f35b6802b5e3af16b1880000610238600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461094090919063ffffffff16565b1015610279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027090610d02565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c79190610d59565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610402576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104ad576000600182815481106104285761042761108a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a590610fe3565b915050610405565b50600067ffffffffffffffff8111156104c9576104c86110b9565b5b6040519080825280602002602001820160405280156104f75781602001602082028036833780820191505090505b506001908051906020019061050d929190610a1c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161053490610c97565b60006040518083038185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50509050806105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190610ce2565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ed576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561077157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610727575b5050505050905060005b81518110156107fb5760008282815181106107995761079861108a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107f390610fe3565b91505061077b565b50600067ffffffffffffffff811115610817576108166110b9565b5b6040519080825280602002602001820160405280156108455781602001602082028036833780820191505090505b506001908051906020019061085b929190610a1c565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516108a490610c97565b60006040518083038185875af1925050503d80600081146108e1576040519150601f19603f3d011682016040523d82523d6000602084013e6108e6565b606091505b50509050806108f457600080fd5b5050565b60006001828154811061090e5761090d61108a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061094c8361097c565b90506000670de0b6b3a764000085836109659190610ef7565b61096f9190610daf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190610b86565b5050509150506402540be40081610a149190610de0565b915050919050565b828054828255906000526020600020908101928215610a95579160200282015b82811115610a945782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a3c565b5b509050610aa29190610aa6565b5090565b5b80821115610abf576000816000905550600101610aa7565b5090565b600081359050610ad281611142565b92915050565b600081519050610ae781611159565b92915050565b600081359050610afc81611170565b92915050565b600081519050610b1181611170565b92915050565b600081519050610b2681611187565b92915050565b600060208284031215610b4257610b416110e8565b5b6000610b5084828501610ac3565b91505092915050565b600060208284031215610b6f57610b6e6110e8565b5b6000610b7d84828501610aed565b91505092915050565b600080600080600060a08688031215610ba257610ba16110e8565b5b6000610bb088828901610b17565b9550506020610bc188828901610ad8565b9450506040610bd288828901610b02565b9350506060610be388828901610b02565b9250506080610bf488828901610b17565b9150509295509295909350565b610c0a81610f51565b82525050565b610c1981610fad565b82525050565b6000610c2c600b83610d48565b9150610c37826110ed565b602082019050919050565b6000610c4f601b83610d48565b9150610c5a82611116565b602082019050919050565b6000610c72600083610d3d565b9150610c7d8261113f565b600082019050919050565b610c9181610f8d565b82525050565b6000610ca282610c65565b9150819050919050565b6000602082019050610cc16000830184610c01565b92915050565b6000602082019050610cdc6000830184610c10565b92915050565b60006020820190508181036000830152610cfb81610c1f565b9050919050565b60006020820190508181036000830152610d1b81610c42565b9050919050565b6000602082019050610d376000830184610c88565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d6482610f8d565b9150610d6f83610f8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610da457610da361102c565b5b828201905092915050565b6000610dba82610f8d565b9150610dc583610f8d565b925082610dd557610dd461105b565b5b828204905092915050565b6000610deb82610f63565b9150610df683610f63565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e3557610e3461102c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e7257610e7161102c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610eaf57610eae61102c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610eec57610eeb61102c565b5b828202905092915050565b6000610f0282610f8d565b9150610f0d83610f8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4657610f4561102c565b5b828202905092915050565b6000610f5c82610f6d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fb882610fbf565b9050919050565b6000610fca82610fd1565b9050919050565b6000610fdc82610f6d565b9050919050565b6000610fee82610f8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110215761102061102c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61114b81610f51565b811461115657600080fd5b50565b61116281610f63565b811461116d57600080fd5b50565b61117981610f8d565b811461118457600080fd5b50565b61119081610f97565b811461119b57600080fd5b5056fea26469706673582212202261c844e290597ed7361b928d8eef35952e6836f8df2ea96a2dc987060e9f3164736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80639214864e116100595780639214864e146101405780639e87a5cd1461017d578063b60d4288146101a8578063be2693f0146101b2578063d7b4750c146101bc57610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100ea578063893d20e81461011557610099565b36610099576100976101f9565b005b6100a16101f9565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b2c565b610333565b6040516100d79190610d22565b60405180910390f35b6100e861037b565b005b3480156100f657600080fd5b506100ff6105bd565b60405161010c9190610d22565b60405180910390f35b34801561012157600080fd5b5061012a6105ca565b6040516101379190610cac565b60405180910390f35b34801561014c57600080fd5b5061016760048036038101906101629190610b2c565b6105f4565b6040516101749190610d22565b60405180910390f35b34801561018957600080fd5b5061019261063c565b60405161019f9190610cc7565b60405180910390f35b6101b06101f9565b005b6101ba610666565b005b3480156101c857600080fd5b506101e360048036038101906101de9190610b59565b6108f8565b6040516101f09190610cac565b60405180910390f35b6802b5e3af16b1880000610238600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461094090919063ffffffff16565b1015610279576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027090610d02565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c79190610d59565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610402576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104ad576000600182815481106104285761042761108a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a590610fe3565b915050610405565b50600067ffffffffffffffff8111156104c9576104c86110b9565b5b6040519080825280602002602001820160405280156104f75781602001602082028036833780820191505090505b506001908051906020019061050d929190610a1c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161053490610c97565b60006040518083038185875af1925050503d8060008114610571576040519150601f19603f3d011682016040523d82523d6000602084013e610576565b606091505b50509050806105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190610ce2565b60405180910390fd5b50565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ed576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561077157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610727575b5050505050905060005b81518110156107fb5760008282815181106107995761079861108a565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107f390610fe3565b91505061077b565b50600067ffffffffffffffff811115610817576108166110b9565b5b6040519080825280602002602001820160405280156108455781602001602082028036833780820191505090505b506001908051906020019061085b929190610a1c565b506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516108a490610c97565b60006040518083038185875af1925050503d80600081146108e1576040519150601f19603f3d011682016040523d82523d6000602084013e6108e6565b606091505b50509050806108f457600080fd5b5050565b60006001828154811061090e5761090d61108a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061094c8361097c565b90506000670de0b6b3a764000085836109659190610ef7565b61096f9190610daf565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156109c557600080fd5b505afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190610b86565b5050509150506402540be40081610a149190610de0565b915050919050565b828054828255906000526020600020908101928215610a95579160200282015b82811115610a945782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a3c565b5b509050610aa29190610aa6565b5090565b5b80821115610abf576000816000905550600101610aa7565b5090565b600081359050610ad281611142565b92915050565b600081519050610ae781611159565b92915050565b600081359050610afc81611170565b92915050565b600081519050610b1181611170565b92915050565b600081519050610b2681611187565b92915050565b600060208284031215610b4257610b416110e8565b5b6000610b5084828501610ac3565b91505092915050565b600060208284031215610b6f57610b6e6110e8565b5b6000610b7d84828501610aed565b91505092915050565b600080600080600060a08688031215610ba257610ba16110e8565b5b6000610bb088828901610b17565b9550506020610bc188828901610ad8565b9450506040610bd288828901610b02565b9350506060610be388828901610b02565b9250506080610bf488828901610b17565b9150509295509295909350565b610c0a81610f51565b82525050565b610c1981610fad565b82525050565b6000610c2c600b83610d48565b9150610c37826110ed565b602082019050919050565b6000610c4f601b83610d48565b9150610c5a82611116565b602082019050919050565b6000610c72600083610d3d565b9150610c7d8261113f565b600082019050919050565b610c9181610f8d565b82525050565b6000610ca282610c65565b9150819050919050565b6000602082019050610cc16000830184610c01565b92915050565b6000602082019050610cdc6000830184610c10565b92915050565b60006020820190508181036000830152610cfb81610c1f565b9050919050565b60006020820190508181036000830152610d1b81610c42565b9050919050565b6000602082019050610d376000830184610c88565b92915050565b600081905092915050565b600082825260208201905092915050565b6000610d6482610f8d565b9150610d6f83610f8d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610da457610da361102c565b5b828201905092915050565b6000610dba82610f8d565b9150610dc583610f8d565b925082610dd557610dd461105b565b5b828204905092915050565b6000610deb82610f63565b9150610df683610f63565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610e3557610e3461102c565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e7257610e7161102c565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610eaf57610eae61102c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610eec57610eeb61102c565b5b828202905092915050565b6000610f0282610f8d565b9150610f0d83610f8d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f4657610f4561102c565b5b828202905092915050565b6000610f5c82610f6d565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610fb882610fbf565b9050919050565b6000610fca82610fd1565b9050919050565b6000610fdc82610f6d565b9050919050565b6000610fee82610f8d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110215761102061102c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b50565b61114b81610f51565b811461115657600080fd5b50565b61116281610f63565b811461116d57600080fd5b50565b61117981610f8d565b811461118457600080fd5b50565b61119081610f97565b811461119b57600080fd5b5056fea26469706673582212202261c844e290597ed7361b928d8eef35952e6836f8df2ea96a2dc987060e9f3164736f6c63430008070033",
  "devdoc": {
    "author": "Nadia Mahyaee",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 64,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}